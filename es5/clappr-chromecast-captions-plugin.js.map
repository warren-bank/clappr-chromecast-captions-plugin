{"version":3,"sources":["../es6/clappr-chromecast-captions-plugin.js"],"names":[],"mappings":"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","file":"clappr-chromecast-captions-plugin.js","sourcesContent":["// requirements:\n//   1) Chrome 72+\n//      * ES6 static class fields\n//          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Browser_compatibility\n\nclass ChromecastCaptionsPlugin extends ChromecastPlugin {\n  constructor(core) {\n    super(core)\n  }\n\n  containerChanged() {\n    super.containerChanged()\n\n    if (this.container) {\n      this.listenTo(this.container, Clappr.Events.CONTAINER_READY,            this.containerReady)\n      this.listenTo(this.container, Clappr.Events.CONTAINER_SUBTITLE_CHANGED, this.subtitleChanged)\n    }\n  }\n\n  containerReady() {\n    this.initializeTextTracks()\n  }\n\n  initializeTextTracks() {\n    const textTracks = this.container.closedCaptionsTracks  // [{id, name, track}]\n    if (!textTracks || !textTracks.length) return\n\n    for (let i=0; i < textTracks.length; i++) {\n      if (textTracks[i].track.mode === 'showing') return\n    }\n\n    // turn on the first subtitles text track (which is always \"Disabled\") to display the \"CC\" icon/menu in the media-control panel\n    textTracks[0].track.mode = 'showing'\n  }\n\n  get activeTrackIds() {\n    const trackId = this.container.closedCaptionsTrackId\n    return (trackId >= 0)\n      ? [trackId]\n      : []\n  }\n\n  // references:\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Session#loadMedia\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.Media\n  loadMedia() {\n    this.container.pause()\n\n    const src = this.container.options.src\n    Clappr.Log.debug(this.name, 'loading... ' + src)\n\n    const mediaInfo        = this.createMediaInfo(src)\n    const request          = new chrome.cast.media.LoadRequest(mediaInfo)\n    request.autoplay       = true\n    request.activeTrackIds = this.activeTrackIds\n    if (this.currentTime) {\n      request.currentTime  = this.currentTime\n    }\n\n    this.session.loadMedia(\n      request,\n      (mediaSession) => this.loadMediaSuccess('loadMedia', mediaSession),\n      (e) => this.loadMediaError(e)\n    )\n  }\n\n  createMediaInfo(src) {\n    const mediaInfo       = new chrome.cast.media.MediaInfo(src)\n    const mimeType        = ChromecastPlugin.mimeTypeFor(src)\n    const metadata        = this.createMediaMetadata()\n    const tracks          = this.createMediaTracks()\n\n    mediaInfo.contentType = this.options.contentType || mimeType\n    mediaInfo.customData  = this.options.customData\n    mediaInfo.metadata    = metadata\n    mediaInfo.tracks      = tracks\n\n    return mediaInfo\n  }\n\n  // ---------------------------------------------\n  // references:\n  //   https://developers.google.com/cast/docs/chrome_sender/advanced\n  // ---------------------------------------------\n  createMediaTracks() {\n    let externalTracks = this.core.options.externalTracks || (this.core.options.playback ? this.core.options.playback.externalTracks : null)\n    if (!externalTracks || !Array.isArray(externalTracks) || !externalTracks.length) return null\n\n    externalTracks = externalTracks.filter(track => track.kind === 'subtitles')\n    if (!externalTracks.length) return null\n\n    const textTracks = this.container.closedCaptionsTracks  // [{id, name, track}]\n    if (!textTracks || !Array.isArray(textTracks) || (textTracks.length < externalTracks.length)) return null\n\n    // UNSAFE ASSUMPTIONS:\n    //  1. textTracks[i] corresponds to externalTracks[i]\n\n    return externalTracks.map((externalTrack, index) => {\n      const textTrack        = textTracks[index]\n\n      const track            = new chrome.cast.media.Track(textTrack.id, chrome.cast.media.TrackType.TEXT)\n      track.trackContentId   = externalTrack.src\n      track.trackContentType = ChromecastCaptionsPlugin.subtitleMimeTypeFor(externalTrack.src)\n      track.subtype          = chrome.cast.media.TextTrackType.SUBTITLES\n      track.language         = externalTrack.lang  || textTrack.track.language\n      track.name             = externalTrack.label || textTrack.name\n      track.customData       = null\n\n      return track\n    })\n  }\n\n  // references:\n  //   https://www.rev.com/api/attachmentsgetcontent\n  static MIMETYPES = {\n    \".vtt\":    \"text/vtt\",                          // WebVTT\n    \".srt\":    \"application/x-subrip\",              // SubRip\n    \".ttml\":   \"application/ttml+xml\",              // Timed Text\n    \".cap\":    \"application/x-cheetah-cap\",         // Cheetah\n    \".scc\":    \"text/x-scc\",                        // Scenarist\n    \".dxfp\":   \"application/ttaf+xml\",              // DXFP (Netflix)\n    \".mcc\":    \"text/x-mcc\",                        // MacCaption (Adobe)\n    \".stl\":    \"text/x-stl\",                        // Spruce\n    \".qt.txt\": \"application/x-quicktime-timedtext\"  // Quicktime Timed Text\n  }\n\n  static FILE_EXTENSION_PATTERN = /^.*?((?:\\.[^\\.\\/]+)+)([\\?#].*)?$/i\n\n  static subtitleMimeTypeFor(url) {\n    if (!ChromecastCaptionsPlugin.FILE_EXTENSION_PATTERN.test(url))\n      return null\n\n    const ext = url.replace(ChromecastCaptionsPlugin.FILE_EXTENSION_PATTERN, '$1')\n\n    return ChromecastCaptionsPlugin.MIMETYPES[ext]\n      ? ChromecastCaptionsPlugin.MIMETYPES[ext]\n      : null\n  }\n\n  // references:\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.EditTracksInfoRequest\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.Media#editTracksInfo\n  subtitleChanged(track) {\n    if (!this.session || !this.mediaSession) return\n\n    const request = new chrome.cast.media.EditTracksInfoRequest(this.activeTrackIds)\n    this.mediaSession.editTracksInfo(request)\n  }\n}\n\nwindow.ChromecastCaptionsPlugin = ChromecastCaptionsPlugin\n"]}