{"version":3,"sources":["../es6/clappr-chromecast-captions-plugin.js"],"names":[],"mappings":"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","file":"clappr-chromecast-captions-plugin.js","sourcesContent":["// -----------------------------------------------------------------------------\n// ES6 requirements:\n//   1) Chrome 72+\n//      * static class fields\n//          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Browser_compatibility\n// -----------------------------------------------------------------------------\n\n// -----------------------------------------------------------------------------\n// monkey patch HlsjsPlayback\n//\n// purpose:\n//   when HlsjsPlayback is active, hold a copy of its \"hls.js\" instance,\n//   which is aware of all in-stream (subtitle) text tracks.\n//\n// references:\n//   https://github.com/clappr/hlsjs-playback/blob/master/src/hls.js\n//   https://github.com/video-dev/hls.js/blob/master/docs/API.md\n\nlet HLSJS = null\n\nconst getInternalTracks = () => {\n  return (!HLSJS)\n    ? []\n    : HLSJS.subtitleTracks.map(subtitleTrack => ({\n        kind:  'subtitles',\n        src:   subtitleTrack.url,\n        lang:  subtitleTrack.lang,\n        label: subtitleTrack.name\n      }))\n}\n\n{\n  const HlsjsPlayback = Clappr.HLS.prototype\n\n  // setup\n  const _setup  = HlsjsPlayback._setup\n\n  // teardown\n  const stop    = HlsjsPlayback.stop\n  const destroy = HlsjsPlayback.destroy\n\n  HlsjsPlayback._setup = function(){  // note: don't use arrow function; need 'this' to refer to the instance of HlsjsPlayback\n    _setup.call(this)\n\n    HLSJS = this._hls\n    this.trigger(Clappr.Events.PLAYBACK_READY, this.name)\n\n    /*\n    this._hls.on(Clappr.HLS.HLSJS.Events.SUBTITLE_TRACK_LOADING, (evt, data) => {\n      const {url, id} = data\n      console.log(url, this._hls.subtitleTracks)\n    })\n    */\n  }\n\n  HlsjsPlayback.stop = function(){  // note: don't use arrow function; need 'this' to refer to the instance of HlsjsPlayback\n    stop.call(this)\n\n    HLSJS = null\n  }\n\n  HlsjsPlayback.destroy = function(){  // note: don't use arrow function; need 'this' to refer to the instance of HlsjsPlayback\n    destroy.call(this)\n\n    HLSJS = null\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nclass ChromecastCaptionsPlugin extends ChromecastPlugin {\n  constructor(core) {\n    super(core)\n\n    this.activeTrackId = -1\n  }\n\n  containerChanged() {\n    super.containerChanged()\n\n    if (this.container) {\n      this.listenTo(this.container, Clappr.Events.CONTAINER_READY,            this.containerReady)\n      this.listenTo(this.container, Clappr.Events.CONTAINER_SUBTITLE_CHANGED, this.subtitleChanged)\n    }\n  }\n\n  containerReady() {\n    this.initializeTextTracks()\n  }\n\n  initializeTextTracks() {\n    const textTracks = this.container.closedCaptionsTracks  // [{id, name, track}]\n    if (!textTracks || !textTracks.length) return\n\n    for (let i=0; i < textTracks.length; i++) {\n      if (textTracks[i].track.mode === 'showing') return\n    }\n\n    // turn on the first subtitles text track (which is always \"Disabled\") to display the \"CC\" icon/menu in the media-control panel\n    textTracks[0].track.mode = 'showing'\n  }\n\n  get externalTracks() {\n    const externalTracks = this.core.options.externalTracks || (this.core.options.playback ? this.core.options.playback.externalTracks : null)\n\n    return (!externalTracks || !Array.isArray(externalTracks) || !externalTracks.length)\n      ? []\n      : externalTracks.filter(track => track.kind === 'subtitles')\n  }\n\n  get activeTrackIds() {\n    const trackId = (!this.session || !this.mediaSession)\n      ? this.container.closedCaptionsTrackId\n      : this.activeTrackId\n\n    return (trackId >= 0)\n      ? [trackId]\n      : []\n  }\n\n  // references:\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.Session#loadMedia\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.Media\n  loadMedia() {\n    this.container.pause()\n\n    const src = this.container.options.src\n    Clappr.Log.debug(this.name, 'loading... ' + src)\n\n    const mediaInfo        = this.createMediaInfo(src)\n    const request          = new chrome.cast.media.LoadRequest(mediaInfo)\n    request.autoplay       = true\n    request.activeTrackIds = this.activeTrackIds\n    if (this.currentTime) {\n      request.currentTime  = this.currentTime\n    }\n\n    this.session.loadMedia(\n      request,\n      (mediaSession) => this.loadMediaSuccess('loadMedia', mediaSession),\n      (e) => this.loadMediaError(e)\n    )\n  }\n\n  createMediaInfo(src) {\n    const mediaInfo       = new chrome.cast.media.MediaInfo(src)\n    const mimeType        = ChromecastPlugin.mimeTypeFor(src)\n    const metadata        = this.createMediaMetadata()\n    const tracks          = this.createMediaTracks()\n\n    mediaInfo.contentType = this.options.contentType || mimeType\n    mediaInfo.customData  = this.options.customData\n    mediaInfo.metadata    = metadata\n    mediaInfo.tracks      = tracks\n\n    return mediaInfo\n  }\n\n  // ---------------------------------------------\n  // references:\n  //   https://developers.google.com/cast/docs/chrome_sender/advanced\n  // ---------------------------------------------\n  createMediaTracks() {\n    const combinedTracks = [...this.externalTracks, ...getInternalTracks()]\n    if (!combinedTracks.length) return null\n\n    return combinedTracks.map((textTrack, index) => {\n      const track            = new chrome.cast.media.Track(index, chrome.cast.media.TrackType.TEXT)\n      track.trackContentId   = textTrack.src\n      track.trackContentType = ChromecastCaptionsPlugin.subtitleMimeTypeFor(textTrack.src)\n      track.subtype          = chrome.cast.media.TextTrackType.SUBTITLES\n      track.language         = textTrack.lang\n      track.name             = textTrack.label\n      track.customData       = null\n\n      return track\n    })\n  }\n\n  // references:\n  //   https://www.rev.com/api/attachmentsgetcontent\n  static MIMETYPES = {\n    \".vtt\":    \"text/vtt\",                          // WebVTT\n    \".srt\":    \"application/x-subrip\",              // SubRip\n    \".ttml\":   \"application/ttml+xml\",              // Timed Text\n    \".cap\":    \"application/x-cheetah-cap\",         // Cheetah\n    \".scc\":    \"text/x-scc\",                        // Scenarist\n    \".dxfp\":   \"application/ttaf+xml\",              // DXFP (Netflix)\n    \".mcc\":    \"text/x-mcc\",                        // MacCaption (Adobe)\n    \".stl\":    \"text/x-stl\",                        // Spruce\n    \".qt.txt\": \"application/x-quicktime-timedtext\"  // Quicktime Timed Text\n  }\n\n  static FILE_EXTENSION_PATTERN = /^.*?((?:\\.[^\\.\\/]+)+)([\\?#].*)?$/i\n\n  static subtitleMimeTypeFor(url) {\n    if (!ChromecastCaptionsPlugin.FILE_EXTENSION_PATTERN.test(url))\n      return null\n\n    const ext = url.replace(ChromecastCaptionsPlugin.FILE_EXTENSION_PATTERN, '$1')\n\n    return ChromecastCaptionsPlugin.MIMETYPES[ext]\n      ? ChromecastCaptionsPlugin.MIMETYPES[ext]\n      : null\n  }\n\n  // references:\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.EditTracksInfoRequest\n  //   https://developers.google.com/cast/docs/reference/chrome/chrome.cast.media.Media#editTracksInfo\n  subtitleChanged(track) {\n    this.activeTrackId = track.id\n\n    if (!this.session || !this.mediaSession) return\n\n    const request = new chrome.cast.media.EditTracksInfoRequest(this.activeTrackIds)\n    this.mediaSession.editTracksInfo(request)\n  }\n\n  loadMediaSuccess(how, mediaSession) {\n    super.loadMediaSuccess(how, mediaSession)\n\n    // monkey patch ChromecastPlayback\n\n    const combinedTracks = [...this.externalTracks, ...getInternalTracks()]\n    if (!combinedTracks.length) return\n\n    const textTracks = combinedTracks.map((textTrack, index) => ({\n      id:    index,\n      name:  textTrack.label,\n      track: {\n        id:      \"\",\n        mode:    ((index === this.activeTrackId) ? \"showing\" : \"disabled\"),\n        kind:     textTrack.kind,\n        label:    textTrack.label,\n        language: textTrack.lang\n      }\n    }))\n\n    Object.defineProperty(this.playbackProxy, \"hasClosedCaptionsTracks\", {\n      configurable: false,\n      enumerable:   false,\n      writable:     false,\n      value:        true\n    })\n\n    Object.defineProperty(this.playbackProxy, \"closedCaptionsTracks\", {\n      configurable: false,\n      enumerable:   false,\n      writable:     false,\n      value:        textTracks\n    })\n\n    Object.defineProperty(this.playbackProxy, \"closedCaptionsTrackId\", {\n      configurable: false,\n      enumerable:   false,\n      get:          ()   => this.activeTrackId,\n      set:          (id) => {\n        if (id === this.activeTrackId) return\n\n        this.activeTrackId = id\n\n        this.playbackProxy.trigger(Clappr.Events.PLAYBACK_SUBTITLE_CHANGED, {id})\n      }\n    })\n\n    this.playbackProxy.trigger(Clappr.Events.PLAYBACK_SUBTITLE_AVAILABLE)\n  }\n}\n\nwindow.ChromecastCaptionsPlugin = ChromecastCaptionsPlugin\n"]}